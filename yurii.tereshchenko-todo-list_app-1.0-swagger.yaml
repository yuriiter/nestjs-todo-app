openapi: 3.0.0
paths:
  /auth/signin:
    post:
      operationId: AuthController_postLogin
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthDto'
      responses:
        '201':
          description: 'Sign in endpoint which returns an access token that must be inserted to Authorization header in format: "Bearer [token]"'
        '400':
          description: 'Bad credentials'
  /auth/signup:
    post:
      operationId: AuthController_postSignup
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthDto'
      responses:
        '201':
          description: 'Sign up endpoint'
        '400':
          description: 'Invalid parameters or user exists'
  /todo-lists:
    post:
      operationId: TodoListController_create
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TodoListDto'
      responses:
        '201':
          description: 'Create a todo list'
        '400':
          description: 'Invalid parameters'
        '401':
          description: 'Unauthorized'
    get:
      operationId: TodoListController_getAll
      parameters:
        - name: user-id
          required: false
          in: query
          schema:
            type: number
      responses:
        '200':
          description: 'Get all existing todo lists or owned by a certain user'
  /todo-lists/{id}:
    delete:
      operationId: TodoListController_delete
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: number
      responses:
        '200':
          description: 'Delete a todo list with all nested items'
        '400':
          description: 'Invalid parameters'
        '401':
          description: 'Unauthorized'
    get:
      operationId: TodoListController_getById
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: number
      responses:
        '200':
          description: 'Get a todo list with all nested items'
        '400':
          description: 'Invalid parameter'
  /todo-lists/{todoListId}/todo-list-items:
    post:
      operationId: TodoListController_addNewTodoListItem
      parameters:
        - name: todoListId
          required: true
          in: path
          schema:
            type: number
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TodoListItemDto'
      responses:
        '201':
          description: 'Create a todo list item and add it to a todo list'
  /todo-list-items/{id}:
    put:
      operationId: TodoListItemController_changeStatus
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: number
      responses:
        '200':
          description: 'Change status of a certain todo list item'
        '400':
          description: 'Invalid parameters'
        '401':
          description: 'Unauthorized'
  /users/me:
    get:
      operationId: UserController_getMe
      parameters: []
      responses:
        '200':
          description: 'Get information about a signed in user'
        '401':
          description: 'Unauthorized'
  /users:
    get:
      operationId: UserController_getAll
      parameters: []
      responses:
        '200':
          description: 'Get a list of all signed up users'
info:
  title: Todo list app
  description: Todo list app API description
  version: '1.0'
  contact: {}
tags:
  - name: NestJS Todo API
    description: ''
servers: []
components:
  schemas:
    AuthDto:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
          minLength: 3
          maxLength: 15
    TodoListDto:
      type: object
      properties:
        name:
          type: string
    TodoListItemDto:
      type: object
      properties:
        title:
          type: string
        freeText:
          type: string
        deadLine:
          type: string
          format: date-time
        flag:
          type: string
          enum: ['ACTIVE', 'FINISHED', 'CANCELLED']
